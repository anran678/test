import torch
import torchvision.utils as vutils
import matplotlib.pyplot as plt
import numpy as np

def apply_colormap(tensor, colormap=plt.cm.jet):
    """
    将单通道张量转换为伪彩色张量
    Args:
        tensor (torch.Tensor): 单通道张量，形状为 (C=1, H, W) 或 (H, W)
        colormap: Matplotlib 的 colormap 对象，例如 plt.cm.jet, plt.cm.viridis
    Returns:
        colored_tensor (torch.Tensor): 伪彩色张量，形状为 (C=3, H, W)
    """
    # 转换为 NumPy 并移除批次维度（如果存在）
    if tensor.dim() == 4:
        tensor = tensor.squeeze(0)
    if tensor.dim() == 3:
        tensor = tensor.squeeze(0)
    
    # 归一化到 [0, 1]
    tensor = (tensor - tensor.min()) / (tensor.max() - tensor.min() + 1e-8)
    np_data = tensor.cpu().numpy()
    
    # 应用伪彩色映射
    colored_data = colormap(np_data)[..., :3]  # 取 RGB 通道，忽略 alpha
    colored_data = torch.from_numpy(colored_data).permute(2, 0, 1)  # 转为 (C=3, H, W)
    
    return colored_data.float()

# 示例用法
if __name__ == "__main__":
    # 生成单通道特征图（例如形状为 (1, 28, 28)）
    feature_map = torch.randn(1, 28, 28)
    
    # 应用伪彩色映射
    colored_feature = apply_colormap(feature_map, colormap=plt.cm.jet)
    
    # 保存伪彩色图像
    vutils.save_image(colored_feature, "pseudo_color_feature.png")



import torch
import torchvision.utils as vutils

def apply_pseudo_color(tensor):
    """
    将单通道张量转换为伪彩色张量（蓝→青→绿→黄→红）
    Args:
        tensor (torch.Tensor): 单通道张量，形状为 (1, H, W) 或 (H, W)
    Returns:
        colored_tensor (torch.Tensor): 伪彩色张量，形状为 (3, H, W)
    """
    # 归一化到 [0, 1]
    tensor = (tensor - tensor.min()) / (tensor.max() - tensor.min() + 1e-8)
    
    # 定义颜色映射规则（基于分段线性函数）
    r = torch.clamp(1.5 * torch.abs(tensor - 0.5) - 0.25, 0, 1)
    g = torch.clamp(1.5 - 3 * torch.abs(tensor - 0.5), 0, 1)
    b = torch.clamp(1.5 * (0.5 - torch.abs(tensor - 0.5)), 0, 1)
    
    # 合并通道
    colored_tensor = torch.stack([r, g, b], dim=0).squeeze()  # 输出形状 (3, H, W)
    return colored_tensor

# 示例用法
if __name__ == "__main__":
    # 生成单通道特征图（形状 (1, 28, 28)）
    feature_map = torch.rand(1, 28, 28)
    
    # 应用伪彩色
    colored = apply_pseudo_color(feature_map)
    
    # 保存图像
    vutils.save_image(colored, "pseudo_color_custom.png")










def apply_lut_colormap(tensor, lut=None):
    """
    使用预定义颜色查找表生成伪彩色
    Args:
        tensor (torch.Tensor): 单通道张量，形状为 (1, H, W)
        lut (torch.Tensor): 预定义的颜色表，形状为 (256, 3)
    Returns:
        colored_tensor (torch.Tensor): 伪彩色张量，形状为 (3, H, W)
    """
    # 归一化到 [0, 1] 并缩放到 [0, 255]
    tensor = (tensor - tensor.min()) / (tensor.max() - tensor.min() + 1e-8)
    indices = (tensor * 255).long().clamp(0, 255)
    
    # 默认 LUT（示例：Jet 颜色映射）
    if lut is None:
        # 生成 Jet 颜色表（RGB格式）
        jet = torch.tensor([
            [0, 0, 128],    # 深蓝
            [0, 0, 255],    # 蓝
            [0, 255, 255],  # 青
            [255, 255, 0],  # 黄
            [255, 0, 0],    # 红
            [128, 0, 0]     # 深红
        ], dtype=torch.float32)
        lut = torch.cat([jet[i].repeat(51, 1) for i in range(5)] + [jet[-1].repeat(1, 1)], dim=0)
        lut = lut / 255.0  # 归一化到 [0, 1]
    
    # 应用 LUT
    colored_tensor = lut[indices].permute(2, 0, 1)  # 形状 (3, H, W)
    return colored_tensor

# 示例用法
colored = apply_lut_colormap(feature_map)
vutils.save_image(colored, "pseudo_color_lut.png")
